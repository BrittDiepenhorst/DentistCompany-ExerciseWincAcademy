{"ast":null,"code":"import { names } from \"./names\";\n\nconst getRandomFirstName = () => {\n  const person = names[Math.floor(Math.random() * 250)];\n  return `${person.name}`;\n};\n\nconst getRandomLastName = () => {\n  const person = names[Math.floor(Math.random() * 250)];\n  return `${person.surname}`;\n};\n\nconst emails = [\"@gmail.com\", \"@hotmail.com\", \"@ziggo.nl\", \"@outlook.com\"];\n\nconst generateEmail = email => {\n  let index = Math.floor(Math.random() * emails.length);\n  return emails[index];\n};\n\nconst generateUniqueID = () => {\n  return Math.random();\n};\n\nconst getRandomDate = () => {\n  const maxDate = Date.now();\n  const timestamp = Math.floor(Math.random() * maxDate);\n  return new Date(timestamp);\n};\n\nconst generatePerson = () => {\n  const generatePerson = {\n    firstName: getRandomFirstName(),\n    lastName: getRandomLastName(),\n    id: generateUniqueID(),\n    phoneNumber: \"06\" + Math.floor(Math.random() * 100000000),\n    sick: false\n  };\n  return generatePerson;\n};\n\nconst generatePatient = () => {\n  const person = generatePerson();\n  const patientDetails = {\n    email: person.firstName.split(' ')[0] + person.lastName + generateEmail(),\n    birthday: getRandomDate()\n  };\n  const patient = { ...person,\n    ...patientDetails\n  };\n  return patient;\n};\n\nconst generateEmployee = () => {\n  const person = generatePerson();\n  const employeeDetails = {\n    email: person.firstName.split('')[0] + \".\" + person.lastName + \"@dentistcompanybvt.com\"\n  };\n  const employee = { ...person,\n    ...employeeDetails\n  };\n  return employee;\n}; // DATE\n\n\nconst getRandomTime = () => {\n  let hour;\n\n  while (true) {\n    hour = Math.floor(Math.random() * 24);\n\n    if (hour > 7 && hour < 19) {\n      return hour;\n    }\n  }\n};\n\nconst getRandomDay = () => Math.floor(Math.random() * 28) + 1; // APPOINTMENT \n// const generateRandomAppointment = ({ dentists, assistants, patients }) => {\n//   const appointment = {\n//     day: getRandomDay(),\n//     time: getRandomTime(),\n//     patient: generatePatient(patients).id,\n//     dentist: generateEmployee(dentists).id,\n// assistant: generateEmployee(),\n// }\n// if (getRandomInteger(0, 2) === 1)\n//   appointment.assistant = getRandomItem(assistants).id;\n\n\ns; // return appointment;\n// };\n\nconst generateRandomAppointment = () => ({\n  day: getRandomDay(),\n  time: getRandomTime(),\n  patient: generatePatient(),\n  dentist: generateEmployee(),\n  assistant: generateEmployee()\n});\n\nconst generateRandomAppointments = num => Array(num).fill(0).map(_ => generateRandomAppointment());\n\nexport default generateRandomAppointments;\n\nconst getInitialState = () => {\n  const NUM_DENTISTS = 4;\n  const NUM_ASSISTANTS = 2;\n  const NUM_PATIENTS = 50;\n  const NUM_APPOINTMENTS = 10;\n  const people = {\n    dentists: NUM_DENTISTS * generateEmployee,\n    patients: NUM_PATIENTS * generatePatient,\n    assistants: NUM_ASSISTANTS * generateEmployee\n  };\n  const appointments = generateRandomAppointments(people, NUM_APPOINTMENTS);\n  return { ...people,\n    ...{\n      appointments\n    }\n  };\n};\n\nexport { getInitialState };","map":{"version":3,"sources":["/Users/brittdiepenhorst/Winc_Academy/dentist-companyBVT/src/utils/utils.js"],"names":["names","getRandomFirstName","person","Math","floor","random","name","getRandomLastName","surname","emails","generateEmail","email","index","length","generateUniqueID","getRandomDate","maxDate","Date","now","timestamp","generatePerson","firstName","lastName","id","phoneNumber","sick","generatePatient","patientDetails","split","birthday","patient","generateEmployee","employeeDetails","employee","getRandomTime","hour","getRandomDay","s","generateRandomAppointment","day","time","dentist","assistant","generateRandomAppointments","num","Array","fill","map","_","getInitialState","NUM_DENTISTS","NUM_ASSISTANTS","NUM_PATIENTS","NUM_APPOINTMENTS","people","dentists","patients","assistants","appointments"],"mappings":"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","sourcesContent":["import { names } from \"./names\";\n\nconst getRandomFirstName = () => {\n  const person = names[Math.floor(Math.random() * 250)];\n  return `${person.name}`;\n};\n\nconst getRandomLastName = () => {\n  const person = names[Math.floor(Math.random() * 250)];\n  return `${person.surname}`;\n};\n\nconst emails = [\n  \"@gmail.com\",\n  \"@hotmail.com\",\n  \"@ziggo.nl\",\n  \"@outlook.com\"\n];\n\nconst generateEmail = (email) => {\n  let index = Math.floor(Math.random() * emails.length);\n  return emails[index];\n};\n\nconst generateUniqueID = () => {\n  return Math.random();\n};\n\nconst getRandomDate = () => {\n  const maxDate = Date.now();\n  const timestamp = Math.floor(Math.random() * maxDate);\n  return new Date(timestamp);\n};\n\nconst generatePerson = () => {\n  const generatePerson = {\n    firstName: getRandomFirstName(),\n    lastName: getRandomLastName(),\n    id: generateUniqueID(),\n    phoneNumber: \"06\" + Math.floor(Math.random() * 100000000),\n    sick: false,\n  }\n  return generatePerson;\n};\n\nconst generatePatient = () => {\n  const person = generatePerson()\n  const patientDetails = {\n    email: person.firstName.split(' ')[0] + person.lastName + generateEmail(),\n    birthday: getRandomDate(),\n  }\n  const patient = {\n    ...person,\n    ...patientDetails\n  }\n  return patient;\n};\n\nconst generateEmployee = () => {\n  const person = generatePerson()\n  const employeeDetails = {\n    email: person.firstName.split('')[0] + \".\" + person.lastName + \"@dentistcompanybvt.com\",\n  }\n  const employee = {\n    ...person,\n    ...employeeDetails\n  }\n  return employee;\n};\n\n// DATE\nconst getRandomTime = () => {\n  let hour;\n  while (true) {\n    hour = Math.floor(Math.random() * 24);\n    if (hour > 7 && hour < 19) {\n      return hour;\n    }\n  }\n};\n\nconst getRandomDay = () => Math.floor(Math.random() * 28) + 1;\n\n\n// APPOINTMENT \n// const generateRandomAppointment = ({ dentists, assistants, patients }) => {\n//   const appointment = {\n//     day: getRandomDay(),\n//     time: getRandomTime(),\n//     patient: generatePatient(patients).id,\n//     dentist: generateEmployee(dentists).id,\n// assistant: generateEmployee(),\n// }\n// if (getRandomInteger(0, 2) === 1)\n//   appointment.assistant = getRandomItem(assistants).id;\ns\n// return appointment;\n// };\n\nconst generateRandomAppointment = () => ({\n  day: getRandomDay(),\n  time: getRandomTime(),\n  patient: generatePatient(),\n  dentist: generateEmployee(),\n  assistant: generateEmployee(),\n});\n\nconst generateRandomAppointments = num =>\n  Array(num)\n    .fill(0)\n    .map(_ => generateRandomAppointment());\n\nexport default generateRandomAppointments;\n\nconst getInitialState = () => {\n  const NUM_DENTISTS = 4;\n  const NUM_ASSISTANTS = 2;\n  const NUM_PATIENTS = 50;\n  const NUM_APPOINTMENTS = 10;\n  const people = {\n    dentists: NUM_DENTISTS * generateEmployee,\n    patients: NUM_PATIENTS * generatePatient,\n    assistants: NUM_ASSISTANTS * generateEmployee,\n  };\n  const appointments = generateRandomAppointments(people, NUM_APPOINTMENTS);\n  return { ...people, ...{ appointments } };\n};\n\nexport { getInitialState };"]},"metadata":{},"sourceType":"module"}