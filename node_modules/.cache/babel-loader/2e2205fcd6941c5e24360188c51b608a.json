{"ast":null,"code":"import { names } from \"./names\";\n\nconst getRandomInteger = (from, to) => from + Math.floor(Math.random() * to);\n\nconst getRandomItem = arr => arr[Math.floor(Math.random() * arr.length)];\n\nconst generateNItems = (num, func) => Array(num).fill(0).map(func);\n\nconst getRandomFirstName = () => {\n  const person = names[Math.floor(Math.random() * 250)];\n  return `${person.name}`;\n};\n\nconst getRandomLastName = () => {\n  const person = names[Math.floor(Math.random() * 250)];\n  return `${person.surname}`;\n};\n\nconst emails = [\"@gmail.com\", \"@hotmail.com\", \"@ziggo.nl\", \"@outlook.com\"];\n\nconst generateEmail = email => {\n  let index = Math.floor(Math.random() * emails.length);\n  return emails[index];\n};\n\nconst getRandomId = () => getRandomInteger(1, 1000000);\n\nconst getRandomDate = () => {\n  const maxDate = Date.now();\n  const timestamp = Math.floor(Math.random() * maxDate);\n  return new Date(timestamp);\n};\n\nconst generatePerson = () => {\n  const generatePerson = {\n    firstName: getRandomFirstName(),\n    lastName: getRandomLastName(),\n    id: getRandomId(),\n    phoneNumber: \"06\" + Math.floor(Math.random() * 100000000),\n    sick: false\n  };\n  return generatePerson;\n};\n\nconst generatePatient = () => {\n  const person = generatePerson();\n  const patientDetails = {\n    email: person.firstName.split(' ')[0] + person.lastName + generateEmail(),\n    birthday: getRandomDate()\n  };\n  const patient = { ...person,\n    ...patientDetails\n  };\n  return patient;\n};\n\nconst generateEmployee = () => {\n  const person = generatePerson();\n  const employeeDetails = {\n    email: person.firstName.split('')[0] + \".\" + person.lastName + \"@dentistcompanybvt.com\"\n  };\n  const employee = { ...person,\n    ...employeeDetails\n  };\n  return employee;\n}; // DATE\n\n\nconst getRandomTime = () => {\n  let hour;\n\n  while (true) {\n    hour = Math.floor(Math.random() * 24);\n\n    if (hour > 7 && hour < 19) {\n      return hour;\n    }\n  }\n};\n\nconst getRandomDay = () => Math.floor(Math.random() * 28) + 1; // APPOINTMENT \n\n\nconst generateRandomAppointment = ({\n  dentists,\n  assistants,\n  patients\n}) => {\n  const appointment = {\n    day: getRandomDay(),\n    time: getRandomTime(),\n    patient: generatePatient(patients).id,\n    dentist: generateEmployee(dentists).id // assistant: generateEmployee(),\n\n  };\n  if (getRandomInteger(0, 2) === 1) appointment.assistant = getRandomItem(assistants).id;\n  return appointment;\n};\n\nconst generateRandomAppointments = (people, num_appointments) => generateNItems(num_appointments, () => generateRandomAppointment(people));\n\nexport default generateRandomAppointments;\n\nconst getInitialState = () => {\n  const NUM_DENTISTS = 4;\n  const NUM_ASSISTANTS = 2;\n  const NUM_PATIENTS = 50;\n  const NUM_APPOINTMENTS = 10;\n  const people = {\n    dentists: generateNItems(NUM_DENTISTS, generateEmployee),\n    patients: generateNItems(NUM_PATIENTS, generatePatient),\n    assistants: generateNItems(NUM_ASSISTANTS, generateEmployee)\n  };\n  const appointments = generateRandomAppointments(people, NUM_APPOINTMENTS);\n  return { ...people,\n    ...{\n      appointments\n    }\n  };\n};\n\nexport { getInitialState };","map":{"version":3,"sources":["/Users/brittdiepenhorst/Winc_Academy/dentist-companyBVT/src/utils/utils.js"],"names":["names","getRandomInteger","from","to","Math","floor","random","getRandomItem","arr","length","generateNItems","num","func","Array","fill","map","getRandomFirstName","person","name","getRandomLastName","surname","emails","generateEmail","email","index","getRandomId","getRandomDate","maxDate","Date","now","timestamp","generatePerson","firstName","lastName","id","phoneNumber","sick","generatePatient","patientDetails","split","birthday","patient","generateEmployee","employeeDetails","employee","getRandomTime","hour","getRandomDay","generateRandomAppointment","dentists","assistants","patients","appointment","day","time","dentist","assistant","generateRandomAppointments","people","num_appointments","getInitialState","NUM_DENTISTS","NUM_ASSISTANTS","NUM_PATIENTS","NUM_APPOINTMENTS","appointments"],"mappings":"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","sourcesContent":["import { names } from \"./names\";\n\nconst getRandomInteger = (from, to) => from + Math.floor(Math.random() * to);\n\nconst getRandomItem = arr => arr[Math.floor(Math.random() * arr.length)];\n\nconst generateNItems = (num, func) => Array(num).fill(0).map(func);\n\nconst getRandomFirstName = () => {\n  const person = names[Math.floor(Math.random() * 250)];\n  return `${person.name}`;\n};\n\nconst getRandomLastName = () => {\n  const person = names[Math.floor(Math.random() * 250)];\n  return `${person.surname}`;\n};\n\nconst emails = [\n  \"@gmail.com\",\n  \"@hotmail.com\",\n  \"@ziggo.nl\",\n  \"@outlook.com\"\n];\n\nconst generateEmail = (email) => {\n  let index = Math.floor(Math.random() * emails.length);\n  return emails[index];\n};\n\nconst getRandomId = () => getRandomInteger(1, 1000000);\n\nconst getRandomDate = () => {\n  const maxDate = Date.now();\n  const timestamp = Math.floor(Math.random() * maxDate);\n  return new Date(timestamp);\n};\n\nconst generatePerson = () => {\n  const generatePerson = {\n    firstName: getRandomFirstName(),\n    lastName: getRandomLastName(),\n    id: getRandomId(),\n    phoneNumber: \"06\" + Math.floor(Math.random() * 100000000),\n    sick: false,\n  }\n  return generatePerson;\n};\n\nconst generatePatient = () => {\n  const person = generatePerson()\n  const patientDetails = {\n    email: person.firstName.split(' ')[0] + person.lastName + generateEmail(),\n    birthday: getRandomDate(),\n  }\n  const patient = {\n    ...person,\n    ...patientDetails\n  }\n  return patient;\n};\n\nconst generateEmployee = () => {\n  const person = generatePerson()\n  const employeeDetails = {\n    email: person.firstName.split('')[0] + \".\" + person.lastName + \"@dentistcompanybvt.com\",\n  }\n  const employee = {\n    ...person,\n    ...employeeDetails\n  }\n  return employee;\n};\n\n// DATE\nconst getRandomTime = () => {\n  let hour;\n  while (true) {\n    hour = Math.floor(Math.random() * 24);\n    if (hour > 7 && hour < 19) {\n      return hour;\n    }\n  }\n};\n\nconst getRandomDay = () => Math.floor(Math.random() * 28) + 1;\n\n// APPOINTMENT \nconst generateRandomAppointment = ({ dentists, assistants, patients }) => {\n  const appointment = {\n    day: getRandomDay(),\n    time: getRandomTime(),\n    patient: generatePatient(patients).id,\n    dentist: generateEmployee(dentists).id,\n    // assistant: generateEmployee(),\n  }\n  if (getRandomInteger(0, 2) === 1)\n    appointment.assistant = getRandomItem(assistants).id;\n\n  return appointment;\n};\n\nconst generateRandomAppointments = (people, num_appointments) =>\n  generateNItems(num_appointments, () => generateRandomAppointment(people));\n\nexport default generateRandomAppointments;\n\nconst getInitialState = () => {\n  const NUM_DENTISTS = 4;\n  const NUM_ASSISTANTS = 2;\n  const NUM_PATIENTS = 50;\n  const NUM_APPOINTMENTS = 10;\n  const people = {\n    dentists: generateNItems(NUM_DENTISTS, generateEmployee),\n    patients: generateNItems(NUM_PATIENTS, generatePatient),\n    assistants: generateNItems(NUM_ASSISTANTS, generateEmployee),\n  };\n  const appointments = generateRandomAppointments(people, NUM_APPOINTMENTS);\n  return { ...people, ...{ appointments } };\n};\n\nexport { getInitialState };"]},"metadata":{},"sourceType":"module"}